# specification will be avalible on /fileCloud/apidocs
openapi: 3.0.3

info:
  title: FileCloudService_s3
  description: 'This API is designed to work with local(hot) and cloud(cold) file storage' 
  contact:
    name: 'API Support'
    email: architects@migcredit.ru
  version: 0.0.6
  # DocumentType and file meta data may be changed/refined later
  
externalDocs:
  url: https://confluence.migcredit.ru/pages/viewpage.action?pageId=121602081
  description: 'FileCloud service architecture'
  
servers:
- url: http://mck-t3-docker-filecloud.mgc.local/
  description: 'Development server'
  variables:
    username:
      default: 'Test'
    port:
      default: '5000' # '1337' with ngnix
- url: https://0.0.0.0/
  description: 'Production server'
  variables:
    username:
      default: 'Production'
    port:
      default: '443'
      
tags:
- name: 'singleFile'
  description: 'Operation with single file'
- name: 'multipleFiles'
  description: 'Operation with multiple files'
  
security:
  - bearerAuth: []
      
paths:
  /fileCloud/upload:
    post:
      tags:
        - 'singleFile'
      summary: 'Upload file'
      operationId: 'uploadFile'
      description: 'Upload single file upload with aux file information'
      requestBody:
        description: 'File in multipart/form-data'
        content:
          multipart/form-data:
            schema:
                $ref: '#/components/schemas/Upload'
      responses:
        '200':
          $ref: '#/components/responses/FileUploaded'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '415':
          $ref: '#/components/responses/BadFile'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /fileCloud/download:
    post:
      tags:
        - 'singleFile'
      summary: 'Download file'
      operationId: 'downloadFile'
      description: 'Download single file based on aux file information'
      requestBody:
        description: 'File'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Download'
      responses:
        '200':
          $ref: '#/components/responses/FileFound'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/FileNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /fileCloud/fileList:
    post:
      tags:
        - 'multipleFiles'
      summary: 'Get list of files'
      operationId: 'getFileList'
      description: 'Get list of files with meta data associated with provided IDs'
      requestBody:
        description: 'File list'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileList'
      responses:
        '200':
          $ref: '#/components/responses/AssociatedList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/FileNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /fileCloud/fileMeta:
    post:
      tags:
        - 'singleFile'
      summary: 'Get file meta'
      operationId: 'fileMeta'
      description: 'Get file meta by ID'
      requestBody:
        description: 'File Meta'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileMeta'
      responses:
        '200':
          $ref: '#/components/responses/FileMeta'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/FileNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'        
  
  /fileCloud/delete:
    post:
      tags:
        - 'singleFile'
      summary: 'Delete file from fileCloud'
      operationId: 'deleteFile'
      description: 'Mark for deletion from cloud(cold) file storage'
      requestBody:
        description: 'File id marked for deletion'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Delete'
      responses:
        '200':
          $ref: '#/components/responses/FileMarkedForDeletion'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/FileNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
components:
  securitySchemes:
    bearerAuth:
      type: http
      description: 'Bearer token for authentication'
      scheme: bearer
      bearerFormat: JWT
  responses:
    FileMarkedForDeletion:
      description: 'File marked for deletion'
      content:
        application/json:
          schema:
            type: object
            properties:
              FileID:
                type: integer
                description: 'File ID'
    AssociatedList:
      description: 'List of files id with or with succesfully uploaded'
      content:
        application/json:
          schema:
            type: object
            properties:
              FileList:
                type: array
                items:
                  $ref: '#/components/schemas/FileMetaObject'
    UnauthorizedError:
      description: 'Access token is missing or invalid'
      content:
        text/plain:
          schema:
            type: string
            description: 'Unauthorized error message'   
    FileUploaded:
      description: 'File succesfully uploaded'
      content:
        application/json:
          schema:
            type: object
            properties:
              FileID:
                type: integer
                description: 'File ID'
    FileFound:
      description: 'File is found'
      content:
        application/octet-stream:
          schema:
            type: string
            format: binary
    FileNotFound:
      description: 'File is not found by fileCloud'
      content:
        application/json:
          schema:
            type: object
            properties:
              FileID:
                type: integer
                description: 'File ID is not found'
    BadRequest:
      description: 'There must be at least one ID associated with the file'
      content:
        text/plain:
          schema:
            type: string
            description: 'Bad request error message'   
    InternalServerError:
      description: 'Internal error feedback'
      content:
        text/plain:
          schema:
            type: string
            description: 'Internal error message'  
    ServiceUnavailable:
      description: 'Service Unavailable'
      content:
        application/json:
          schema:
            type: object
            properties:
              ServiceName:
                type: string
                description: 'Name of service that is currently unavalible to fileCloud'
              Error:
                type: string
                description: 'Error message'
    BadFile:
      description: 'Checksum, size etc is not compatible with fileCloud'
      content:
        text/plain:
          schema:
            type: string
            description: 'Bad file error message' 
    FileMeta:
      description: 'File Meta'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FileMetaObject'
    
  schemas:
    FileMetaObject:
      type: object
      properties:
        FileID:
          $ref: '#/components/schemas/FileID'
        InHotStorage:
          type: boolean
          description: 'Is file is in local cache'
        InColdStorage:
          type: boolean
          description: 'Is file is in cloud cache'
        UploadedDate:
          $ref: '#/components/schemas/TimeStamp'
        LastAcquiredDate:
          $ref: '#/components/schemas/TimeStamp'
        UCDB_ID:
          $ref: '#/components/schemas/IntegerID'
        OCDB_ID:
          $ref: '#/components/schemas/IntegerID'
        SourceID:
          $ref: '#/components/schemas/SourceID'
        ContractNumber:
          $ref: '#/components/schemas/IntegerID'
        DocumentType:
          $ref: '#/components/schemas/DocumentType'
        EDocumentType:
          $ref: '#/components/schemas/EDocumentType'
        SourceSystem:
          $ref: '#/components/schemas/SourceSystem'
        FileName:
          type: string
        MimeType:
          type: string
        FileExtension:
          type: string
        SizeBytes:
          type: integer
        ACL:
          $ref: '#/components/schemas/ACL'
        EncodingOnUpload:
          $ref: '#/components/schemas/Encoding'
        EncodingCurrent:
          $ref: '#/components/schemas/Encoding'
        EncryptionOnCloud:
          type: string
          description: 'Encryption method for file before sending to cloud'
        FileTypeInfo:
          type: string
          description: 'Information about file type'
        FileTypeAuxInfo:
          type: string
          description: 'Aux information about file type'
        Description:
          type: string
    Upload:
      type: object
      required:
        - MessageID
        - MessageDate
        - SourceSystem
        - Description
        - DocumentType
        - EDocumentType
        - File
      properties:
        MessageID:
          $ref: '#/components/schemas/MessageID'
        MessageDate:
          $ref: '#/components/schemas/MessageDate'
        SourceSystem:
          $ref: '#/components/schemas/SourceSystem'
        Description:
          type: string
          description: 'File description from source system'
        DocumentType:
          $ref: '#/components/schemas/DocumentType'
        EDocumentType:
          $ref: '#/components/schemas/EDocumentType'
        File:
          type: string
          format: binary
          description: 'File binary'
        # must be at least one of these IDs to get 200 OK
        UCDB_ID:
          $ref: '#/components/schemas/IntegerID'
        OCDB_ID:
          $ref: '#/components/schemas/IntegerID'
        SourceID:
          $ref: '#/components/schemas/SourceID'
        ContractNumber:
          $ref: '#/components/schemas/IntegerID'
    Download:
      type: object
      required:
        - MessageID
        - MessageDate
        - FileID
        - Encoding
      properties:
        MessageID:
          $ref: '#/components/schemas/MessageID'
        MessageDate:
          $ref: '#/components/schemas/MessageDate'
        FileID:
          $ref: '#/components/schemas/FileID'
        Encoding:
          $ref: '#/components/schemas/Encoding'
    FileList:
      type: object
      required:
        - MessageID
        - MessageDate
        - WithMeta
         # must be at least one of the IDs to get 200 OK
      properties:
        MessageID:
          $ref: '#/components/schemas/MessageID'
        MessageDate:
          $ref: '#/components/schemas/MessageDate'
        WithMeta:
          $ref: '#/components/schemas/WithMeta'
          # must be at least one of these IDs to get 200 OK
        UCDB_ID:
            $ref: '#/components/schemas/IntegerID'
        OCDB_ID:
          $ref: '#/components/schemas/IntegerID'
        SourceID:
          $ref: '#/components/schemas/SourceID'
        ContractNumber:
          $ref: '#/components/schemas/IntegerID'
    FileMeta:
      type: object
      required:
        - MessageID
        - MessageDate
        - FileID
      properties:
        MessageID:
          $ref: '#/components/schemas/MessageID'
        MessageDate:
          $ref: '#/components/schemas/MessageDate'
        FileID:
          $ref: '#/components/schemas/FileID'
    Delete:
      type: object
      required:
        - MessageID
        - MessageDate
        - FileID
      properties:
        MessageID:
          $ref: '#/components/schemas/MessageID'
        MessageDate:
          $ref: '#/components/schemas/MessageDate'
        FileID:
          $ref: '#/components/schemas/FileID'
    
    WithMeta:
      type: boolean
      description: 'Send files with corresponding metadata'
      default: False
    MessageID: 
      type: string
      description: 'Source system request ID for logging purpose'
    MessageDate:
      type: string
      description: 'Source system request timestamp for logging purpose'
    TimeStamp:
      type: string
      description: 'TimeStamp format YYYY-MM-DDTHH:MM:SS. mmmmmm'
    SourceID:
      type: string
      description: 'Source system id associated with the file'
    IntegerID:
      type: integer
      description: 'Integer ID'
    FileID:
      type: string
      description: 'File ID'
    Encoding:
      type: string
      enum: ['base64', 'binary']
    SourceSystem:
      type: string
      enum: ['ESB',
             'BPM',
             'PAD',
             'WEB',
             'FIS',
             'CRM',
             'ABS',
             'AGENTS']
      description: 'System by which upload is initiated'
    ACL:
      type: object
      properties:
              Download:
                type: array
                items:
                  $ref: '#/components/schemas/SourceSystem'
              Upload:
                type: array
                items:
                  $ref: '#/components/schemas/SourceSystem'
              Delete:
                type: array
                items:
                  $ref: '#/components/schemas/SourceSystem'
      description: 'File ACL'
    EDocumentType:
      type: string
      description: 'https://confluence.migcredit.ru/pages/viewpage.action?pageId=32080124'
      enum: ['Personal Form',
            'Client application form',
            'Documents SP',
            'Auto Docs',
            'Clien Dosc',
            'Opty Docs',
            'Application',
            'Cession Reject',
            'Documents On The Loan',
            'Others',
            'Scan On The Loan',
            'Consent Office',
            'Photography business',
            'Photo',
            'Template',
            'Form Template',
            'Opty Template',
            'Cession Reject template',
            'Note Template',
            'Agreement Template',
            'Documents By The Card',
            'Delivery Document',
            'Empty Scan',
            'Scan',
            'Opty Scan',
            'IdentificationScan',
            'ServiceSertificateLA',
            'Refinance contract']
    DocumentType:
      type: string
      description: 'https://confluence.migcredit.ru/pages/viewpage.action?pageId=42083725'
      enum: ['CessionReject',
            'IndoconsNotificationCDP',
            'IndoconsNotificationDP',
            'InsuranceUralsibNS',
            'InsuranceAbsolutNS',
            'InsuranceAbsolutNSPR',
            'InsuranceRGSNS',
            'InsurancePariNSIM',
            'Agreement',
            'AgreementEDS',
            'ActPTS',
            'IndoconsNotification',
            'Anketa',
            'AnketaEDS',
            'ActCreditDoctor',
            'ConsultEffectBudget',
            'Statement',
            'StatementEDS',
            'PaymentSchedule',
            'Indocons',
            'IndoconsEDS',
            'Memo',
            'Passport',
            'PassportMain',
            'PassportRegistration',
            'Photo',
            'SelfiesPassport',
            'Signature',
            'Identification',
            'Staement',
            'Response',
            'Claim',
            'MEMO',
            'Photo Business',
            'DocumentIP (Document/Documents SP)',
            'Statement Openbank',
            'Other',
            'Reference',
            'Registry',
            'Status',
            'Statement Scan',
            'Statement Template',
            'EarlyPaymentStatEDS (Signed EarlyPayment Stat)',
            'Unsigned EarlyPayment Stat',
            'Refinance contract']
